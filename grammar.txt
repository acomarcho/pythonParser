PROGRAM -> PROGRAM_STATEMENTS
PROGRAM_STATEMENTS -> ASSIGNMENT | FUNCTION_CALL | METHOD_CALL | IF_STATEMENT | DEF_STATEMENT | CLASS_STATEMENT | IMPORT_STATEMENT | RAISE_STATEMENT | WITH_STATEMENT | PASS_STATEMENT | FOR_STATEMENT | WHILE_STATEMENT | COMMENT | PROGRAM_STATEMENTS _NEWLINE PROGRAM | PROGRAM_STATEMENTS ; PROGRAM
IDENTIFIER -> _IDENTIFIER | _IDENTIFIER . IDENTIFIER
ASSIGNMENT -> IDENTIFIER = DATA | IDENTIFIER _CPLUS DATA | IDENTIFIER _CMIN DATA | IDENTIFIER _CDIVI DATA | IDENTIFIER _CDIVF DATA | IDENTIFIER _CMUL DATA | IDENTIFIER _CPOW DATA | ASSIGNMENT SINGLINE_COMMENT
COMMENT -> SINGLINE_COMMENT | MULTLINE_COMMENT
MULTLINE_COMMENT -> _TRIPSQUOTE MULTLINE_COMMENT_CONTENT _TRIPSQUOTE | _TRIPDQUOTE MULTLINE_COMMENT_CONTENT _TRIPDQUOTE
MULTLINE_COMMENT_CONTENT -> _ANY | _ANY MULTLINE_COMMENT_CONTENT | INLINE_TERMINALS | INLINE_TERMINALS MULTLINE_COMMENT_CONTENT | _NEWLINE | _NEWLINE MULTLINE_COMMENT_CONTENT
SINGLINE_COMMENT -> # SINGLINE_COMMENT_CONTENT
SINGLINE_COMMENT_CONTENT -> _ANY | _ANY SINGLINE_COMMENT_CONTENT | INLINE_TERMINALS | INLINE_TERMINALS SINGLINE_COMMENT_CONTENT
WHILE_STATEMENT -> while DATA : _NEWLINE LOOP_BLOCK | while DATA : COMMENT _NEWLINE LOOP_BLOCK
IFLOOP_STATEMENT -> if CONDITIONAL : _NEWLINE IFLOOP_BLOCK | if CONDITIONAL : COMMENT _NEWLINE IFLOOP_BLOCK | IFLOOP_STATEMENT _NEWLINE ELIFLOOP_STATEMENT | IFLOOP_STATEMENT _NEWLINE ELSELOOP_STATEMENT
IFLOOP_BLOCK -> ASSIGNMENT | FUNCTION_CALL | METHOD_CALL | IFLOOP_STATEMENT | DEF_STATEMENT | RAISE_STATEMENT | CLASS_STATEMENT | _NEWLINE IFLOOP_BLOCK | ASSIGNMENT IFLOOP_BLOCK | FUNCTION_CALL IFLOOP_BLOCK | METHOD_CALL IFLOOP_BLOCK | IFLOOP_STATEMENT IFLOOP_BLOCK | DEF_STATEMENT IFLOOP_BLOCK | RAISE_STATEMENT IFLOOP_BLOCK | CLASS_STATEMENT IFLOOP_BLOCK | WITH_STATEMENT | WITH_STATEMENT IFLOOP_BLOCK | IMPORT_STATEMENT | IMPORT_STATEMENT IFLOOP_BLOCK | PASS_STATEMENT | PASS_STATEMENT IFLOOP_BLOCK | LOOP_STATEMENT | LOOP_STATEMENT IFLOOP_BLOCK | FOR_STATEMENT | FOR_STATEMENT IFLOOP_BLOCK | WHILE_STATEMENT | WHILE_STATEMENT IFLOOP_BLOCK | COMMENT | COMMENT IFLOOP_BLOCK
ELIFLOOP_STATEMENT -> elif CONDITIONAL : _NEWLINE IFLOOP_BLOCK | elif CONDITIONAL : COMMENT _NEWLINE IFLOOP_BLOCK |  ELIFLOOP_STATEMENT ELIFLOOP_STATEMENT | ELIFLOOP_STATEMENT ELSELOOP_STATEMENT
ELSELOOP_STATEMENT -> else : _NEWLINE IFLOOP_BLOCK | else : COMMENT _NEWLINE IFLOOP_BLOCK
LOOP_STATEMENT -> continue | break | LOOP_STATEMENT COMMENT
FOR_STATEMENT -> for IDENTIFIER in DATA : _NEWLINE LOOP_BLOCK | for IDENTIFIER in DATA : COMMENT _NEWLINE LOOP_BLOCK
LOOP_BLOCK -> _NEWLINE LOOP_BLOCK | ASSIGNMENT | ASSIGNMENT LOOP_BLOCK | FUNCTION_CALL | FUNCTION_CALL LOOP_BLOCK | METHOD_CALL | METHOD_CALL LOOP_BLOCK | IFLOOP_STATEMENT | IFLOOP_STATEMENT LOOP_BLOCK | DEF_STATEMENT | DEF_STATEMENT LOOP_BLOCK | RAISE_STATEMENT | RAISE_STATEMENT LOOP_BLOCK | PASS_STATEMENT | PASS_STATEMENT LOOP_BLOCK | LOOP_STATEMENT | LOOP_STATEMENT LOOP_BLOCK | FOR_STATEMENT | FOR_STATEMENT LOOP_BLOCK | WHILE_STATEMENT | WHILE_STATEMENT LOOP_BLOCK | COMMENT | COMMENT LOOP_BLOCK
PASS_STATEMENT -> pass | PASS_STATEMENT COMMENT
WITH_STATEMENT -> with DATA as IDENTIFIER : _NEWLINE WITH_BLOCK | with DATA as IDENTIFIER : COMMENT _NEWLINE WITH_BLOCK
WITH_BLOCK -> _NEWLINE WITH_BLOCK | ASSIGNMENT | ASSIGNMENT WITH_BLOCK | FUNCTION_CALL | FUNCTION_CALL WITH_BLOCK | METHOD_CALL | METHOD_CALL WITH_BLOCK | IF_STATEMENT | IF_STATEMENT WITH_BLOCK | DEF_STATEMENT | DEF_STATEMENT WITH_BLOCK | RAISE_STATEMENT | RAISE_STATEMENT WITH_BLOCK | CLASS_STATEMENT | CLASS_STATEMENT WITH_BLOCK | WITH_STATEMENT | WITH_STATEMENT WITH_BLOCK | IMPORT_STATEMENT | IMPORT_STATEMENT WITH_BLOCK | PASS_STATEMENT | PASS_STATEMENT WITH_BLOCK | FOR_STATEMENT | FOR_STATEMENT WITH_BLOCK | WHILE_STATEMENT | WHILE_STATEMENT WITH_BLOCK | COMMENT | COMMENT WITH_BLOCK
RAISE_STATEMENT -> raise | raise DATA | raise DATA from IDENTIFIER | RAISE_STATEMENT COMMENT
IMPORT_STATEMENT -> import IDENTIFIER | import IDENTIFIER as IDENTIFIER | from IDENTIFIER import IDENTIFIER | from IDENTIFIER import * | from IDENTIFIER import IDENTIFIER as IDENTIFIER | from IDENTIFIER import IMPORT_IDENTIFIER | IMPORT_STATEMENT COMMENT
IMPORT_IDENTIFIER -> IDENTIFIER | IDENTIFIER , IMPORT_IDENTIFIER
CLASS_STATEMENT -> class IDENTIFIER : _NEWLINE CLASS_BLOCK | class IDENTIFIER : COMMENT _NEWLINE CLASS_BLOCK
CLASS_BLOCK -> ASSIGNMENT | FUNCTION_CALL | METHOD_CALL | IF_STATEMENT | DEF_STATEMENT | RAISE_STATEMENT | CLASS_STATEMENT | _NEWLINE CLASS_BLOCK | ASSIGNMENT CLASS_BLOCK | FUNCTION_CALL CLASS_BLOCK | METHOD_CALL CLASS_BLOCK | IF_STATEMENT CLASS_BLOCK | DEF_STATEMENT CLASS_BLOCK | RAISE_STATEMENT CLASS_BLOCK | CLASS_STATEMENT CLASS_BLOCK | WITH_STATEMENT | WITH_STATEMENT CLASS_BLOCK | IMPORT_STATEMENT | IMPORT_STATEMENT CLASS_BLOCK | PASS_STATEMENT | PASS_STATEMENT CLASS_BLOCK | FOR_STATEMENT | FOR_STATEMENT CLASS_BLOCK | WHILE_STATEMENT | WHILE_STATEMENT CLASS_BLOCK | COMMENT | COMMENT CLASS_BLOCK
DEF_STATEMENT -> def IDENTIFIER ( ) : _NEWLINE DEF_BLOCK | def IDENTIFIER ( DEF_PARAMS ) : _NEWLINE DEF_BLOCK | def IDENTIFIER ( ) : COMMENT _NEWLINE DEF_BLOCK | def IDENTIFIER ( DEF_PARAMS ) : COMMENT _NEWLINE DEF_BLOCK
DEF_PARAMS -> IDENTIFIER | IDENTIFIER , DEF_PARAMS
DEF_BLOCK -> ASSIGNMENT | FUNCTION_CALL | METHOD_CALL | IFRET_STATEMENT | RETURN_STATEMENT | DEF_STATEMENT | RAISE_STATEMENT | CLASS_STATEMENT | _NEWLINE DEF_BLOCK | ASSIGNMENT DEF_BLOCK | FUNCTION_CALL DEF_BLOCK | METHOD_CALL DEF_BLOCK | IFRET_STATEMENT DEF_BLOCK | RETURN_STATEMENT DEF_BLOCK | DEF_STATEMENT DEF_BLOCK | RAISE_STATEMENT DEF_BLOCK | CLASS_STATEMENT DEF_BLOCK | WITH_STATEMENT | WITH_STATEMENT DEF_BLOCK | IMPORT_STATEMENT | IMPORT_STATEMENT DEF_BLOCK | PASS_STATEMENT | PASS_STATEMENT DEF_BLOCK | FOR_STATEMENT | FOR_STATEMENT DEF_BLOCK | WHILE_STATEMENT | WHILE_STATEMENT DEF_BLOCK | COMMENT | COMMENT DEF_BLOCK
RETURN_STATEMENT -> return DATA | RETURN_STATEMENT COMMENT
IF_STATEMENT -> if CONDITIONAL : _NEWLINE IF_BLOCK | if CONDITIONAL : COMMENT _NEWLINE IF_BLOCK | IF_STATEMENT _NEWLINE ELIF_STATEMENT | IF_STATEMENT _NEWLINE ELSE_STATEMENT
IF_BLOCK -> ASSIGNMENT | FUNCTION_CALL | METHOD_CALL | IF_STATEMENT | DEF_STATEMENT | RAISE_STATEMENT | CLASS_STATEMENT | _NEWLINE IF_BLOCK | ASSIGNMENT IF_BLOCK | FUNCTION_CALL IF_BLOCK | METHOD_CALL IF_BLOCK | IF_STATEMENT IF_BLOCK | DEF_STATEMENT IF_BLOCK | RAISE_STATEMENT IF_BLOCK | CLASS_STATEMENT IF_BLOCK | WITH_STATEMENT | WITH_STATEMENT IF_BLOCK | IMPORT_STATEMENT | IMPORT_STATEMENT IF_BLOCK | PASS_STATEMENT | PASS_STATEMENT IF_BLOCK | FOR_STATEMENT | FOR_STATEMENT IF_BLOCK | WHILE_STATEMENT | WHILE_STATEMENT IF_BLOCK | COMMENT IF_BLOCK
ELIF_STATEMENT -> elif CONDITIONAL : _NEWLINE IF_BLOCK | elif CONDITIONAL : COMMENT _NEWLINE IF_BLOCK | ELIF_STATEMENT _NEWLINE ELIF_STATEMENT | ELIF_STATEMENT _NEWLINE ELSE_STATEMENT
ELSE_STATEMENT -> else : _NEWLINE IF_BLOCK | else : COMMENT _NEWLINE IF_BLOCK
IFRET_STATEMENT -> if CONDITIONAL : _NEWLINE IFRET_BLOCK | if CONDITIONAL : COMMENT _NEWLINE IFRET_BLOCK | IFRET_STATEMENT _NEWLINE ELIFRET_STATEMENT | IFRET_STATEMENT _NEWLINE ELSERET_STATEMENT
IFRET_BLOCK -> ASSIGNMENT | FUNCTION_CALL | METHOD_CALL | IFRET_STATEMENT | DEF_STATEMENT | RAISE_STATEMENT | CLASS_STATEMENT | RETURN_STATEMENT | _NEWLINE IFRET_BLOCK | ASSIGNMENT IFRET_BLOCK | FUNCTION_CALL IFRET_BLOCK | METHOD_CALL IFRET_BLOCK | IFRET_STATEMENT IFRET_BLOCK | DEF_STATEMENT IFRET_BLOCK | RAISE_STATEMENT IFRET_BLOCK | CLASS_STATEMENT IFRET_BLOCK | RETURN_STATEMENT IFRET_BLOCK | WITH_STATEMENT | WITH_STATEMENT IFRET_BLOCK | IMPORT_STATEMENT | IMPORT_STATEMENT IFRET_BLOCK | PASS_STATEMENT | PASS_STATEMENT IFRET_BLOCK | FOR_STATEMENT | FOR_STATEMENT IFRET_BLOCK | WHILE_STATEMENT | WHILE_STATEMENT IFRET_BLOCK | COMMENT | COMMENT IFRET_BLOCK
ELIFRET_STATEMENT -> elif CONDITIONAL : _NEWLINE IFRET_BLOCK | elif CONDITIONAL : COMMENT _NEWLINE IFRET_BLOCK | ELIFRET_STATEMENT _NEWLINE ELIFRET_STATEMENT | ELIFRET_STATEMENT _NEWLINE ELSERET_STATEMENT
ELSERET_STATEMENT -> else : _NEWLINE IFRET_BLOCK | else : COMMENT _NEWLINE IFRET_BLOCK
DATA -> NONTERNARY_DATA | TERNARY_DATA
NONTERNARY_DATA -> STRING | _INTEGER | FLOAT | LIST | TUPLE | SET | DICTIONARY | BOOLEAN | IDENTIFIER | CONDITIONAL | MATH_OPERATION | FUNCTION_CALL | METHOD_CALL | None | LIST_OPER | DICT_OPER
TERNARY_DATA -> DATA if CONDITIONAL else DATA
DICT_IDENTIFIER -> DICTIONARY | IDENTIFIER
DICT_OPER -> DICT_IDENTIFIER [ DATA ]
LIST_IDENTIFIER -> LIST | TUPLE | IDENTIFIER | FUNCTION_CALL | METHOD_CALL | STRING
LIST_OPER -> LIST_IDENTIFIER [ DATA ] | LIST_IDENTIFIER [ DATA : DATA ] | LIST_IDENTIFIER [ DATA : ] | LIST_IDENTIFIER [ : DATA ] | LIST_IDENTIFIER [ : ] | LIST_IDENTIFIER [ DATA : DATA : DATA ] | LIST_IDENTIFIER [ DATA : DATA : ] | LIST_IDENTIFIER [ DATA : : DATA ] | LIST_IDENTIFIER [ : DATA : DATA ] | LIST_IDENTIFIER [ DATA : : ] | LIST_IDENTIFIER [ : DATA : ] | LIST_IDENTIFIER [ : : DATA ] | IDENTIFIER [ : : ]
LIST -> [ ] | [ LIST_DATA ]
LIST_DATA -> DATA | DATA , LIST_DATA | DATA for IDENTIFIER in DATA
FLOAT -> _INTEGER . | _INTEGER . _INTEGER
STRING -> " ANY " | ' ANY '
ANY -> _ANY | _ANY ANY | INLINE_TERMINALS | INLINE_TERMINALS ANY
TUPLE -> ( ) | ( DATA , ) | ( DATA , TUPLE_DATA )
TUPLE_DATA -> DATA | DATA , TUPLE_DATA
SET -> { SET_DATA }
SET_DATA -> DATA | DATA , SET_DATA
DICTIONARY -> { } | { DICT_DATA }
DICT_DATA -> STRING : DATA | STRING : DATA , DICT_DATA
BOOLEAN -> True | False
CONDITIONAL -> DATA | DATA _EQ DATA | DATA _NEQ DATA | DATA _GE DATA | DATA _LE DATA | DATA > DATA | DATA < DATA | DATA in DATA | DATA is DATA | not CONDITIONAL | CONDITIONAL or CONDITIONAL | CONDITIONAL and CONDITIONAL | ( CONDITIONAL )
MATH_OPERATION -> DATA + DATA | DATA - DATA | DATA * DATA | DATA / DATA | DATA _DIV DATA | DATA _POW DATA
FUNCTION_CALL -> IDENTIFIER ( ) | IDENTIFIER ( FUNC_PARAMS )
FUNC_PARAMS -> DATA | DATA , FUNC_PARAMS
METHOD_CALL -> IDENTIFIER . IDENTIFIER ( ) | IDENTIFIER . IDENTIFIER ( METHOD_PARAMS )
METHOD_PARAMS -> DATA | DATA , METHOD_PARAMS
INLINE_TERMINALS -> _ANY | _INTEGER | _IDENTIFIER | _EQ | _NEQ | _GE | _LE | _DIV | _CPLUS | _CMIN | _CDIVI | _CDIVF | _CMUL | _POW | _CPOW | > | < | not | and | or | True | False | ' | " | [ | ] | { | } | ( | ) | : | , | . | = | + | - | / | * | : | if | else | elif | def | return | None | class | in | is | from | import | as | raise | with | pass | continue | break | for | while | ; | # | _TRIPSQUOTE | _TRIPDQUOTE